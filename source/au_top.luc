/**
* Alchitry IO Board Interface
*/

module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield

    // 16 buttons in total on keypad
    // buttons to select grid
    input button_1,
    input button_2,
    input button_3,
    input button_4,
    input button_5,
    input button_6,
    input button_7,
    input button_8,
    input button_9,

    // button to select small piece
    input button_A,

    // button to select medium piece
    input button_B,

    // button to select large piece
    input button_C,

    //button to confirm selection
    input button_0,

    // button to reset FPGA
    input button_D,

    // button to on/off
    input button_asterisk,

    //button to restart game
    input button_hash,
    
    output disp_dr_out,
    output ground
  ) {
  
  sig rst;                  // reset signal

  display_driver dispdr(.clk(clk), .rst(rst));

  .clk(clk) {
      //fsm state = {START, MANUAL, AUTO};
      //test_fsm tester(.error(io_dip[2][7]));
      //manual_test manual(.io_shield_button(io_button), .io_shield_dip(io_dip)); // instance of the manual tester
    //wave wave1;                                                               // fancy wave effect
      //multi_seven_seg seven_seg_display;
    
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    disp_dr_out = dispdr.out;
  }
}